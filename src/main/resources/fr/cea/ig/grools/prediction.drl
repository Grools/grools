/*
* Copyright LABGeM (2014)
*
* author: Jonathan MERCIER
*
* This software is a computer program whose purpose is to annotate a complete genome.
*
* This software is governed by the CeCILL license under French law and
* abiding by the rules of distribution of free software. You can use,
* modify and/ or redistribute the software under the terms of the CeCILL
* license as circulated by CEA, CNRS and INRIA at the following URL
* "http://www.cecill.info".
*
* As a counterpart to the access to the source code and rights to copy,
* modify and redistribute granted by the license, users are provided only
* with a limited warranty and the software's author, the holder of the
* economic rights, and the successive licensors have only limited
* liability.
*
* In this respect, the user's attention is drawn to the risks associated
* with loading, using, modifying and/or developing or reproducing the
* software by the user in light of its specific status of free software,
* that may mean that it is complicated to manipulate, and that also
* therefore means that it is reserved for developers and experienced
* professionals having in-depth computer Concept. Users are therefore
* encouraged to load and test the software's suitability as regards their
* requirements in conditions enabling the security of their systems and/or
* data to be ensured and, more generally, to use and operate it in the
* same conditions as regards security.
*
* The fact that you are presently reading this means that you have had
* Concept of the CeCILL license and that you accept its terms.
*/

package fr.cea.ig.grools;

import fr.cea.ig.grools.model.Knowledge;
import fr.cea.ig.grools.model.FiveState;
import fr.cea.ig.grools.model.Prediction;
import fr.cea.ig.grools.model.NodeType;

dialect "mvel"

rule "Retract used Prediction"
    when
        Knowledge( $kid := id, presence != FiveState.UNEVALUATED )
        $p: Prediction( $kid := knowledgeId )
    then
        retract( $p );
end

rule "Prediction infer his none existence"
    when
        $k: Knowledge( $kid := id, nodeType == NodeType.LEAF, presence == FiveState.UNEVALUATED )
        (
            or
            not( Prediction( $kid := knowledgeId ) )
            Prediction( $kid := knowledgeId, presence == FiveState.UNKNOWN )
         )
    then
        modify( $k ){
            presence = FiveState.UNKNOWN
        }
end


rule "Prediction infer his presence/absence"
    when
        $k: Knowledge( $kid := id, nodeType == NodeType.LEAF, presence == FiveState.UNEVALUATED )
        (
            or
            predictionIsTrueAndFalse( $kid; )
            Prediction( $kid := knowledgeId, presence == FiveState.BOTH )
         )
    then
        modify( $k ){
            presence = FiveState.BOTH
        }
end


rule "Prediction infer his absence"
    when
        $k: Knowledge( $kid := id, nodeType == NodeType.LEAF, presence == FiveState.UNEVALUATED )
        Prediction( $kid := knowledgeId, presence == FiveState.FALSE )
        not( Prediction( $kid := knowledgeId, presence == FiveState.TRUE ) )
    then
        modify( $k ){
            presence = FiveState.FALSE
        }
end


rule "Prediction infer his presence"
    when
        $k: Knowledge( $kid := id, nodeType == NodeType.LEAF, presence == FiveState.UNEVALUATED )
        Prediction( $kid := knowledgeId, presence == FiveState.TRUE )
        not( Prediction( $kid := knowledgeId, presence == FiveState.FALSE ) )
    then
        modify( $k ){
            presence = FiveState.TRUE
        }
end
